Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force
[Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
Install-PackageProvider -Name NuGet -Force -Scope CurrentUser -Confirm:$false
$psGallery = Get-PSRepository -Name PSGallery

if ($psGallery.InstallationPolicy -ne 'Trusted') {
    Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
}
function Clean-RegistryProperties {
    param([string]$registryKeyPath)
    try {
        $subKeys = Get-ChildItem -Path $registryKeyPath | Where-Object { $_.PSIsContainer }

        foreach ($subKey in $subKeys) {
            try {
                $parameters = Get-ItemProperty -Path $subKey.PSPath -ErrorAction SilentlyContinue
                if ($parameters -and $parameters.PSObject.Properties.Name -contains "MinimumStackCommitInBytes") {
                    Remove-ItemProperty -Path $subKey.PSPath -Name MinimumStackCommitInBytes -ErrorAction SilentlyContinue -Confirm:$false
                }
                if ($parameters -and $parameters.PSObject.Properties.Name -contains "Debugger") {
                    Remove-ItemProperty -Path $subKey.PSPath -Name Debugger -ErrorAction SilentlyContinue -Confirm:$false
                }
            } catch {
                Write-Error "Error accessing or cleaning registry key: $($subKey.PSPath)"
            }
            
            # Recursively clean properties in the subkey
            Clean-RegistryProperties -registryKeyPath $subKey.PSPath
        }
    } catch {
        Write-Error "Error accessing registry path: $registryKeyPath"
    }
}
$basePath = "HKLM:\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options"
Clean-RegistryProperties -registryKeyPath $basePath
